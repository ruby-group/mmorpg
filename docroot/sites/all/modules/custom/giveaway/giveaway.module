<?php
/**
 * @file
 * Code for the giveaway feature.
 */

include_once 'giveaway.features.inc';

function giveaway_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  if ($entity_type == 'data_giveaway_keys') {
    $targets['gid']['callback'] = 'giveaway_gid_set_target';
  }
}

function giveaway_gid_set_target($source, $entity, $target, $value, $mapping) {
  $entity->{$mapping['target']} = $entity->feeds_item->{$mapping['source']};
}

//
// POC Code. for reference only
//
function giveaway_node_grants($account, $op) {
  return;
  if ($op != 'view') {
    return array();
  }
  $grants = array();

  $query = new EntityFieldQuery();
  $giveaway_nodes = node_load_multiple(array_keys(current($query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'mmorpg_key_giveaway')
    ->execute()
  )));

  foreach ($giveaway_nodes as $node) {
    $query = new EntityFieldQuery();
    $count = $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'mmorpg_key_instance')
      ->fieldCondition('field_mmorpg_key_giveaway', 'target_id', $node->nid)
      ->fieldCondition('field_mmorpg_ip_address', 'start', ip2long(ip_address()))
      ->count()
      ->addMetaData('account', user_load(1))
      ->execute();

    $grants['user' . $node->nid] = array($account->uid);
    $grants['ip_address' . $node->nid] = array($count < $node->field_keys_per_ip_address[LANGUAGE_NONE][0]['value']);
  }

  return $grants;
}

function giveaway_node_access_records($node) {
  if ($node->type != 'mmorpg_key_instance') {
    return array();
  }

  $game_node = node_load($node->field_mmorpg_key_giveaway[LANGUAGE_NONE][0]['target_id']);
  //
  // This section prevents users from getting multiple codes.
  // if a user has claimed a code, delete grants on all other codes for that game.
  //
  $query = new EntityFieldQuery();
  $nodes = node_load_multiple(array_keys(current($query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $node->type)
    ->fieldCondition('field_mmorpg_key_giveaway', 'target_id', $game_node->nid)
    ->execute()
  )), array(), TRUE);

  $map = array();
  foreach ($nodes as $node_item) {
    if (empty($node_item->field_mmorpg_beneficiary) or empty($node_item->field_mmorpg_beneficiary[LANGUAGE_NONE])) {
      continue;
    }
    $map[$node_item->field_mmorpg_beneficiary[LANGUAGE_NONE][0]['target_id']][] = $node_item->nid;
  }

  $query = new EntityFieldQuery();
  $uids = array_keys(current($query
    ->entityCondition('entity_type', 'user')
    ->propertyCondition('status', 1)
    ->execute()
  ));

  $grants = array();
  foreach ($uids as $uid) {
    if (isset($map[$uid]) and $map[$uid] >= $game_node->field_keys_per_user[LANGUAGE_NONE][0]['value']) {
      db_delete('node_access')
        ->condition('gid', $uid)
        ->condition('realm', 'user' . $game_node->nid)
        ->execute();
    }
    else {
      $grants[] = array(
        'realm' => 'user' . $game_node->nid,
        'gid' => $uid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
  }

  //
  // blanket permissions on the ip address. 1=view,0=no
  // computations are done in hook_node_grants().
  //
  $grants[] = array(
    'realm' => 'ip_address' . $game_node->nid,
    'gid' => 0,
    'grant_view' => 0,
    'grant_update' => 0,
    'grant_delete' => 0,
    'priority' => 0,
  );
  $grants[] = array(
    'realm' => 'ip_address' . $game_node->nid,
    'gid' => 1,
    'grant_view' => 1,
    'grant_update' => 0,
    'grant_delete' => 0,
    'priority' => 0,
  );

  return $grants;
}

function giveaway_node_access($node, $op, $account) {
  return NODE_ACCESS_IGNORE;
  //
  // Since we are distributing keys via a view, this is not used.
  //

  if (!is_object($node) or $node->type !== 'mmorpg_key_instance') {
    return NODE_ACCESS_IGNORE;
  }

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $node->type)
    ->fieldCondition('field_mmorpg_key_giveaway', 'target_id', $node->field_mmorpg_key_giveaway[LANGUAGE_NONE][0]['target_id'])
    ->execute();

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $node->type)
    ->fieldCondition('field_mmorpg_beneficiary', 'target_id', $account->uid)
    ->entityCondition('entity_id', array_keys($result['node']), 'IN')
    ->count()
    ->execute();

  return $result ? NODE_ACCESS_DENY : NODE_ACCESS_IGNORE;
}

function giveaway_node_view($node, $view_mode, $langcode) {
  if ($node->type != 'mmorpg_key_instance') {
    return;
  }

  // TODO: This should be white-listed roles.
  global $user;
  if ($user->uid == 1) {
    return;
  }

  //viewing this node is the equivalent of a key giveaway. mark the key as given away.
  $node->field_mmorpg_beneficiary[LANGUAGE_NONE][0]['target_id'] = $user->uid;
  $node->field_mmorpg_ip_address[LANGUAGE_NONE][0]['start'] = ip2long(ip_address());
  $node->field_mmorpg_ip_address[LANGUAGE_NONE][0]['end'] = ip2long(ip_address());
  node_save($node);
}
