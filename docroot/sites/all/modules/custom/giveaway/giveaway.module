<?php
/**
 * @file
 * Code for the giveaway feature.
 */

include_once 'giveaway.features.inc';

/**
 * This has been included here because the projspace server is running version 5.4
 */
include_once 'array_column.php';

/**
 * Implements hook_ctools_plugin_directory().
 */
function giveaway_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function giveaway_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  if ($entity_type == 'data_giveaway_keys') {
    $targets['gid']['callback'] = '_giveaway_gid_set_target';
    $targets['url']['callback'] = '_giveaway_url_set_target';
  }
}

function _giveaway_gid_set_target($source, $entity, $target, $value, $mapping) {
  $entity->{$mapping['target']} = $entity->feeds_item->{$mapping['source']};
}

function _giveaway_url_set_target($source, $entity, $target, $value, $mapping) {
  $entity->feeds_item->$target = $entity->gid . '-' . $entity->game_key;
}

/**
 * Implements hook_block_info().
 */
function giveaway_block_info() {
  $blocks['giveaway_claim_block'] = array(
    'info' => t('Giveaway Claim Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['giveaway_keys_left_block'] = array(
    'info' => t('Giveaway Keys Left Block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['giveaway_user_claimed_key_block'] = array(
    'info' => t('Giveaway User Claimed Key Block'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  $blocks['giveaway_title_rss_block'] = array(
    'info' => t('Giveaway Title & RSS Block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function giveaway_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'giveaway_claim_block':
      $block['content'] = drupal_get_form('_giveaway_show_claim_button');
      break;
    case 'giveaway_keys_left_block':
      $block['content'] = _giveaway_show_keys_left();
      break;
    case 'giveaway_user_claimed_key_block':
      $block['content'] = _giveaway_show_user_claimed_key();
      break;
    case 'giveaway_title_rss_block':
      $block['content'] = _giveaway_show_title_rss();
      break;
  }
  return $block;
}

function _giveaway_show_claim_button() {
  return array(
    'gid' => array(
      '#type' => 'hidden',
      '#value' => @end(arg()),
    ),
    'claim_button' => array(
      '#type' => 'submit',
      '#value' => t('Click Here To Get Your Beta Key Information!'),
      '#attributes' => array(
        'class' => array('btn large green'),
      ),
      '#submit' => array(
        '_giveaway_show_claim_button_submit',
      ),
    ),
  );
}

function _giveaway_show_keys_left() {
  $count = db_select('giveaway_keys')
    ->fields(NULL, array('gkid'))
    ->condition('claimed_on', 0)
    ->condition('gid', @end(arg()))
    ->execute()
    ->rowCount();
  return "<div class='remainingkeys'>" .
  format_plural($count, '@count Key Left', '@count Keys Left', array('@count' => number_format($count)))
  . "</div>";
}

function _giveaway_show_user_claimed_key() {
  global $user;
  $node = node_load(@end(arg()));
  $key_parts = explode('|', db_select('giveaway_keys')
    ->fields(NULL, array('game_key'))
    ->condition('uid', $user->uid)
    ->condition('gid', $node->nid)
    ->execute()
    ->fetchField());

  for ($search = array(), $count = 1; $count <= count($key_parts); $count++) {
    $search[] = "#keyval_$count#";
  }
  return str_ireplace($search, $key_parts, $node->field_successfuly_giveaway_body[LANGUAGE_NONE][0]['value']);
}

function _giveaway_show_claim_button_submit($form, &$form_state) {
  global $user;
  $giveaway = node_load($form_state['values']['gid']);

  if (_giveaway_user_is_logged_in($user)
    and _giveaway_user_is_confirmed($user)
    and _giveaway_users_ip_is_within_limit($giveaway)
    and _giveaway_is_private_and_user_is_eligible($giveaway, $user)
    and _giveaway_user_has_not_claimed_a_related_giveaway_key($giveaway, $user)
    and _giveaway_todays_key_quota_is_not_exhausted($giveaway)
    and _giveaway_hourly_spread_is_not_exhausted($giveaway)
  ) {

    $id = db_select('giveaway_keys')
      ->fields(NULL, array('gkid'))
      ->condition('gid', $giveaway->nid)
      ->condition('claimed_on', 0)
      ->range(0, 1)
      ->execute()
      ->fetchField();

    db_update('giveaway_keys')
      ->fields(array(
        'uid' => $user->uid,
        'claimed_on' => time(),
        'ip_address' => ip2long($_SERVER['REMOTE_ADDR'])
      ))
      ->condition('gkid', $id)
      ->execute();
  }
}

function _giveaway_show_title_rss() {
  return "
  <div class='pane-mmorpg-game-game-rss-link-block'>
  <h2 class='title_crumbs'>
      Special Offers &amp; Giveaways
  </h2>"
  . l('RSS', 'giveaways/rss.xml') .
  "</div>";
}

function _giveaway_user_is_logged_in($user) {
  if ($user->uid == 0) {
    drupal_set_message(t("If you do not yet have a MMORPG.COM account, just !link to get one for free!", array('!link' => l('click here', 'user/register'))), 'error');
    return FALSE;
  }
  return TRUE;
}

function _giveaway_user_is_confirmed($user) {
  //@todo this logic is meaningless as user registration & confirmation is not handled yet.
  return TRUE;
  if ($user->data['email_confirmed'] != 0) {
    drupal_set_message(t("You have not yet activated your MMORPG.COM account. You can do this !link", array('!link' => l('at this link', ''))), 'error');
    return FALSE;
  }
  return TRUE;
}

function _giveaway_users_ip_is_within_limit($giveaway) {
  if ($giveaway->field_keys_per_ip_address[LANGUAGE_NONE][0]['value'] <=
    db_select('giveaway_keys')
      ->fields(NULL, array('gkid'))
      ->condition('gid', $giveaway->nid)
      ->condition('ip_address', ip2long($_SERVER['REMOTE_ADDR']))
      ->execute()
      ->rowCount()
  ) {
    drupal_set_message(t("The maximum number of keys (@keys) have already been assigned to your IP Address (@ip).", array(
      '@keys' => $giveaway->field_keys_per_ip_address[LANGUAGE_NONE][0]['value'],
      '@ip' => $_SERVER['REMOTE_ADDR']
    )), 'error');
    return FALSE;
  }
  return TRUE;
}

function _giveaway_user_has_not_claimed_a_related_giveaway_key($giveaway, $user) {
  if (!empty($giveaway->field_related_giveaways)) {
    $related_gids = array();
    foreach ($giveaway->field_related_giveaways[LANGUAGE_NONE] as $id) {
      $related_gids[] = $id['target_id'];
    };
    if ($related_giveaway = db_select('giveaway_keys')
      ->fields(NULL, array('gid'))
      ->condition('gid', $related_gids)
      ->condition('uid', $user->uid)
      ->execute()
      ->fetchField()
    ) {
      $related_giveaway = node_load($related_giveaway);
      drupal_set_message(t("You've already received a Gift Key from !title which is linked to this one.", array('!title' => l($related_giveaway->title, 'node/' . $related_giveaway->nid))), 'error');
      return FALSE;
    }
  }
  return TRUE;
}

function _giveaway_todays_key_quota_is_not_exhausted($giveaway) {
  if ($giveaway->field_keys_per_day[LANGUAGE_NONE][0]['value'] <=
    db_select('giveaway_keys')
      ->fields(NULL, array('gkid'))
      ->condition('gid', $giveaway->nid)
      ->condition('claimed_on', strtotime("midnight", time()), '>')
      ->execute()
      ->rowCount()
  ) {
    drupal_set_message(t("The giveaway quota for today is exhausted! please check back tomorrow."), 'error');
    return FALSE;
  }
  return TRUE;
}

function _giveaway_hourly_spread_is_not_exhausted($giveaway) {
  //@todo have to hard code taxonomy term ids here for lack of a better alternative.
  // 12682 refers to 'Even spread by hour'
  if (!empty($giveaway->field_keys_per_day_spread) and
    $giveaway->field_keys_per_day_spread[LANGUAGE_NONE][0]['tid'] == 12682 and
    $giveaway->field_keys_per_day[LANGUAGE_NONE][0]['value'] / 24 <=
    db_select('giveaway_keys')
      ->fields(NULL, array('gkid'))
      ->condition('gid', $giveaway->nid)
      ->condition('claimed_on', strtotime(date("Y-m-d G:00:00", time())), '>')
      ->execute()
      ->rowCount()
  ) {
    drupal_set_message(t("The hourly quota for the hour is exhausted! please check back after an hour."), 'error');
    return FALSE;
  }
  return TRUE;
}

function _giveaway_is_private_and_user_is_eligible($giveaway, $user) {
  if ($giveaway->field_private_giveaway[LANGUAGE_NONE][0]['value'] and
    !in_array($user->uid, array_column($giveaway->field_private_allowed_users[LANGUAGE_NONE], 'target_id'))
  ) {
    drupal_set_message(t("This is a private giveaway and only available to specific MMORPG.com members. Please proceed to our !link to view Special Offers available to all MMORPG.com members!", array('!link' => l('Special Offers Page', "giveaways"))), 'error');
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_action_info().
 */
function giveaway_action_info() {
  return array(
    'giveaway_unassign_keys' => array(
      'type' => 'data_giveaway_keys',
      'label' => t('Un-assign keys from users.'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

function giveaway_unassign_keys(&$entity, $context) {
  $entity->uid = $entity->ip_address = $entity->claimed_on = 0;
}
